plugins {
  id 'java-library'
  id 'jacoco'

  id 'org.sonarqube' version '2.8'
  id 'io.freefair.lombok' version '4.1.6'
}

// ::: Project metadata :::
group 'br.dhsrocha'
version '1.0.0'

// Should follow wrapper version shipped into this project
wrapper { gradleVersion '6.0.1' }

allprojects {

  apply plugin: 'idea'
  apply plugin: 'base'

  repositories { jcenter() }

  tasks.withType(JavaCompile) {

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    options.compilerArgs.add('-parameters')
  }

  idea {
    module {
      // https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html

      jdkName = String.valueOf(JavaVersion.VERSION_11)

      sourceDirs.add(file('src/main/java'))
      testSourceDirs.add(file('src/test/java'))
      resourceDirs.add(file('src/main/resources'))
      testResourceDirs.add(file('src/test/resources'))
      generatedSourceDirs.add(file('target/main/java'))
      excludeDirs.addAll([file('gradle'), file('.gradle'),
                          file('.idea'), file('build'), file('out')])

      inheritOutputDirs = Boolean.FALSE
      downloadJavadoc = Boolean.TRUE
      downloadSources = Boolean.FALSE
    }
  }
}

ext {
  moduleProd = 'coordinate.core'
  moduleTest = 'coordinate.test'

  junit_version = '5.5.2+'
  junit_platform_version = '1.5.2+'

  lombok_version = '1.18.10+'
}

task runDefaultTasks {
  subprojects.each { m -> m.defaultTasks.each { dependsOn String.format("%s:%s", m.path, it) } }
  allprojects.each { p ->
    p.defaultTasks.each {
      dependsOn 'clean', 'cleanTest', 'cleanIdea', 'cleanIdeaWorkspace', 'idea', 'wrapper', 'build'
    }
  }
}

subprojects { defaultTasks 'build' }

defaultTasks runDefaultTasks.name

dependencies {
  // Test scope
  testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junit_version
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junit_version
  testImplementation 'org.junit.platform:junit-platform-suite-api:' + junit_platform_version
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher:' + junit_platform_version

  // https://plugins.jetbrains.com/plugin/6317-lombok
  compileOnly 'org.projectlombok:lombok:' + lombok_version
  annotationProcessor 'org.projectlombok:lombok:' + lombok_version
}

// ::: Tasks :::

// Compile

compileJava {
  inputs.property('moduleName', moduleProd)
  doFirst {
    options.compilerArgs = [
      '--module-path', classpath.asPath,
    ]
    classpath = files()
  }
}

// Test

compileTestJava {
  inputs.property('moduleName', moduleTest)
  doFirst {
    options.compilerArgs = [
      '--module-path', classpath.asPath,
      '--add-modules', 'org.junit.jupiter.api',
      '--patch-module', "$moduleTest=" + files(sourceSets.test.java.srcDirs).asPath,
    ]
    classpath = files()
  }
}

test {
  useJUnitPlatform()
  filter { exclude '**/module-info.class' }
}

jacocoTestReport {
  reports {
    xml.enabled Boolean.TRUE
    html.enabled Boolean.TRUE
    csv.enabled Boolean.TRUE
  }
}

check.dependsOn jacocoTestReport

// Packaging

jar {
  inputs.property('moduleName', moduleProd)

  description = ''

  doFirst {

    archiveBaseName.set(rootProject.name)

    manifest {
      attributes 'Manifest-Version': 1.0
      attributes 'Specification-Title': 'Coordinate'
      attributes 'Specification-Version': rootProject.version
      attributes 'Specification-Vendor': rootProject.group
      // attributes 'Implementation-Title': ''
      // attributes 'Implementation-Version': ''
      // attributes 'Implementation-Vendor': ''
      attributes 'Automatic-Module-Name': moduleProd
    }
  }
}
